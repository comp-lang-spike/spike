#!/usr/bin/env spike-1

class Color {
    red() { self.green(); }
    green() { self.blue(); }
    blue() { stdout.printf("blue: %s\n", self.printString); }
}

createClass() {
    var myClass;
    
    myClass = (Color)
              subclass: $Foo
              instVarCount: 4
              classVarCount: 2;
    stdout.printf("created class: %s\n", myClass.printString);
    
    var myInstance;
    myInstance = myClass.new();
    myInstance.blue();
}

interpreter(argv) {
    var sourceFilename = argv[1];
    var stream = FileStream.open(sourceFilename, "r");
    if (stream == null) {
        stderr.printf("%s: cannot open '%s'\n", argv[0], sourceFilename);
        return 1;
    }
    
    var st = SymbolTable.new();
    var notifier = Notifier.new(stderr);
    
    var parser = Parser.new();
    var tree = parser.parse(stream, st);
    tree = tree.asModuleDef();
    tree.check(st, notifier);
    
    var module = tree.generateCode();
    
    var newArgv = Array.new(argv.size - 1);
    newArgv[0] = sourceFilename;
    var i;
    for (i = 1; i < newArgv.size; ++i) {
        newArgv[i] = argv[i + 1];
    }
    
    stdout.printf("---- running %s\n", sourceFilename);
    module.main(newArgv);
    
    return 0;
}

main(argv) {
    createClass();
    if (argv.size > 1)
        return interpreter(argv);
    return 0;
}
