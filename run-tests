#!/usr/bin/env python


tests = [
    "examples/accgen.spk",
    "examples/blocks.spk",
    #"examples/circle.spk",
    "examples/fibgen.spk",
    "examples/fib.spk",
    #"examples/fma.spk",
    "examples/foreach.spk",
    "examples/functor.spk",
    "examples/hello.spk",
    "examples/lst/8queen.spk",
    "examples/lst/blocks.spk",
    "examples/lst/cond.spk",
    "examples/lst/super.spk",
    "examples/lst/temp.spk",
    #"examples/nlines.spk",
    "examples/point.spk",
    #"examples/primes.spk",
    "tests/attr.spk",
    #"tests/bc-in-blocks.spk",
    #"tests/cycle.spk",
    #"tests/default-args.spk", # SIGSEGV
    "tests/dnu.spk",
    "tests/dot-star.spk",
    #"tests/empty.spk",
    #"tests/fe.spk",
    "tests/gen.spk",
    "tests/gremlin.spk",
    "tests/index.spk",
    #"tests/iter-musings.spk",
    #"tests/kw-permutations.spk",
    "tests/leaf.spk",
    "tests/my-array.spk",
    #"tests/no-main.spk",
    #"tests/old.spk",
    #"tests/pi.spk",
    #"tests/rodata.spk",
    #"tests/static-errors.spk",
    #"tests/syntax-error.spk",
    "tests/unary-kw.spk",
    "tests/varargs.spk",
    ]


def spike(pathname):
    from spike.compiler import parse
    from spike.compiler.scheck import check, declareBuiltIn
    from spike.compiler.cgen import generateCode
    from spike.compiler.symbols import SymbolTable
    from spike.compiler import Notifier
    from spike.compiler.statements import Compound
    
    tree = Compound()
    tree.extend(parse("rtl/rtl.spk"))
    tree.extend(parse(pathname))
    notifier = Notifier()
    st = SymbolTable()
    declareBuiltIn(st, notifier)
    check(tree, st, notifier)
    notifier.failOnError()
    
    asm = open('test.s', 'w')
    generateCode(tree, asm)
    asm.close()
    
    gcc('test.s')
    
    run('./a.out')
    
    return


def gcc(assembly):
    from os import spawnlp, P_WAIT
    status = spawnlp(
        P_WAIT,
        "gcc", "gcc", "-g", "-I.",
        #"-DLOOKUP_DEBUG",
        assembly,
        "rtl/Array.s",
        "rtl/BlockContext.s",
        "rtl/blocks.s",
        "rtl/CFunction.s",
        "rtl/CObject.s",
        "rtl/Context.c",
        "rtl/Char.s",
        "rtl/error.s",
        "rtl/Function.s",
        "rtl/Integer.s",
        "rtl/main.s",
        "rtl/Object.s",
        "rtl/rot.s",
        "rtl/send.s",
        "rtl/singletons.s",
        "rtl/String.c",
        "rtl/String.s",
        "rtl/test.s",
        "rtl/lookup.c",
        )
    assert status == 0
    return


def run(exe):
    from os import spawnl, P_WAIT
    status = spawnl(P_WAIT, exe, exe)
    assert status == 0
    return


for pathname in tests:
    print "===", pathname
    spike(pathname)

