

class StaticChecker {
    obj tree, symbolTable, rootClassList, requestor;
    
    self init tree: t symbolTable: st requestor: r {
        tree = t;
        symbolTable = st;
        requestor = r;
        return self;
    }
    
    
    symbolTable { return symbolTable; }
    
    
    check() {
        tree.graphviz(stdout);
        stdout.printf("Yip! Yip! Yip!\n");
    }
    
    
    checkDeclSpecs(declSpecs, pass) {
        obj declSpec;
        
        if (pass !== $bind) /* XXX: ??? */
            return;
        
        for (declSpec = declSpecs; declSpec; declSpec = declSpec.next)
            symbolTable.bind(declSpec, requestor);
    }
    
    
    checkExpr(expr, stmt, pass) {
        for ( ; expr !== null; expr = expr.next)
            expr.check(stmt, self, pass);
    }
    
    
    checkArgList(list, outer, pass) {
        obj arg;
        
        for (arg = list; arg !== null; arg = arg.nextArg)
            self.checkExpr(arg, outer, pass);
    }
    
    
    checkStmtList(list, outer, pass) {
        obj stmt;
        
        for (stmt = list; stmt !== null; stmt = stmt.next)
            stmt.check(outer, self, pass);
    }
}
