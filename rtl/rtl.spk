
class Object : null {
    self == x { return self === x; }
    self != x { return self !== x; }
    printString { return "<XXX Object printString>"; }    
    extern self.class {}
    extern unboxed {}
} meta {
    self new { return self basicNew; }
    self new: anInteger { return self basicNew: anInteger; }
    self basicNew { return self basicNew: 0; }
    extern self basicNew: anInteger {}
    extern self box: aPointer {}
}


class Array : Object {
    obj size;
    
    // initializing
    extern self init: anInteger {}
    
    // accessing
    extern size {}
    extern self[i] {}
    extern self[i] = v {}
    
    printString {
        obj i, s, result;
        
        s = self.size;
        if (s == 0)
            return "{}";
        result = "{ ";
        for (i = 0; i < s; ++i) {
            result += self[i].printString;
            if (i + 1 < s)
                result += ", ";
        }
        result += " }";
        return result;
    }
    
    // enumerating
    self do: aBlock { obj i, s; s = self.size; for (i = 0; i < s; ++i) aBlock(self[i]); }
    
} meta {
    self new { return self new: 0; }
    self new: size { return (self basicNew: size) init: size; }
}


class Behavior : Object {
    obj superclass;
    obj rvMethodTable;
    obj lvMethodTable;
    obj instVarCount;
    
    superclass { return superclass; }
}


// XXX
class Char : Object {
    obj value;
    self == x { return Char_eq(self, x); }
    self != x { return !Char_eq(self, x); }
    extern unboxed {}
}


class Class : Behavior {
    obj name;
    
    name { return name; }
}


class IdentityDictionary : Object {
    size { /* XXX */ }
    self[k] { /* XXX */ }
    self[k] = v { /* XXX */ }
    get(k) { /* XXX */ }
}


class Float : Object {
    obj valueLow, valueHigh; // XXX: kludge
    
    // unary operators
    self + 1 { return Float_succ(self); }
    self - 1 { return Float_pred(self); }
    +self    { return Float_pos(self);  }
    -self    { return Float_neg(self);  }
    
    // binary operators
    self *  x { return Float_mul(self, x); }
    self /  x { return Float_div(self, x); }
    self %  x { return Float_mod(self, x); }
    self +  x { return Float_add(self, x); }
    self -  x { return Float_sub(self, x); }
    
    // comparison operators
    self <  x { return Float_lt(self, x); }
    self >  x { return Float_gt(self, x); }
    self <= x { return Float_le(self, x); }
    self >= x { return Float_ge(self, x); }
    self == x { return Float_eq(self, x); }
    self != x { return Float_ne(self, x); }
    
    // printing
    printString { return String fromFloat: self; }
    
    // unboxing
    extern unboxed {}
}


class Integer : Object {
    
    // unary operators
    extern self + 1 {}
    extern self - 1 {}
    extern +self    {}
    extern -self    {}
    extern ~self    {}
    
    // binary operators
    extern self * x {}
    extern self / x {}
    extern self % x {}
    extern self + x {}
    extern self - x {}
    extern self << x {}
    extern self >> x {}
    extern self & x {}
    extern self ^ x {}
    extern self | x {}
    
    // comparison operators
    extern self < x {}
    extern self > x {}
    extern self <= x {}
    extern self >= x {}
    extern self == x {}
    extern self != x {}
    
    // unboxing
    extern unboxed {}
    
    // printing
    printString { return String fromInteger: self; }
    
} meta {
    extern self box: aPointer {}
}


class Metaclass : Behavior {
    obj thisClass;
    
    new { /* XXX ??? */ }
}


class String : Object {
    obj size;
    // str...
    
    // binary operators
    self + x { return String_add(self, x); }
    
    // comparison operators
    self <  x { return String_lt(self, x); }
    self >  x { return String_gt(self, x); }
    self <= x { return String_le(self, x); }
    self >= x { return String_ge(self, x); }
    self == x { return String_eq(self, x); }
    self != x { return String_ne(self, x); }
    
    // accessing
    size { return String_size(self); }
    len { return self.size; }
    self[i] { return String_item(self, i); }
    printString { return String_printString(self); }
    
    // enumerating
    self do: aBlock { obj i, s; s = self.size; for (i = 0; i < s; ++i) aBlock(self[i]); }
    
    // unboxing
    extern unboxed {}
    
} meta {
    self fromInteger: anInteger { return String_fromInteger(anInteger); }
    self fromFloat: aFloat { return String_fromFloat(aFloat); }
}


class Symbol : Object {
    obj hash;
    // str...
    
    printString { return Symbol_printString(self); }
}


class Boolean : Object {
    !self    { self subclassResponsibility; }
    ~self    { self subclassResponsibility; }
    self & x { self subclassResponsibility; }
    self ^ x { self subclassResponsibility; }
    self | x { self subclassResponsibility; }
    printString { self subclassResponsibility; }    
}

class False : Boolean {
    !self    { return true; }
    ~self    { return true; }
    self & x { return false; }
    self ^ x { return x; }
    self | x { return x; }
    printString { return "false"; }    
}

class True : Boolean {
    !self    { return false; }
    ~self    { return false; }
    self & x { return x; }
    self ^ x { return !x; }
    self | x { return true; }
    printString { return "true"; }    
}


class Method : Object {
    obj minArgumentCount;
    obj maxArgumentCount;
    obj localCount;
    // code...
}

class Function : Object {
    obj signature;
    obj pointer;
    extern self( /*...args*/ ) {}
}

class XFunction : Object {
    obj signature;
    obj pointer;
    extern self( /*...args*/ ) {}
}


class Context : Object {
    obj caller;
    obj homeContext;
    obj argumentCount;
    obj pc;
    obj sp;
    obj regSaveArea0;
    obj regSaveArea1;
    obj regSaveArea2;
    obj regSaveArea3;
    /* the following are not present for BlockContext */
    obj method;
    obj methodClass;
    obj receiver;
    obj instVarPointer;
    obj stackBase;
    obj size;
    // obj var[size];
}

class MethodContext : Context {
}

class BlockContext : Context {
    extern self( /*...args*/ ) {}
    extern closure {}
}

class Closure : BlockContext {
    closure { return self; }
}


class CObject : Object {
    extern unboxed {}
}

class CFunction : Object {
    obj signature;
    obj pointer;
    
    extern self( /*...args*/ ) {}
    extern unboxed {}
}


class Message : Object {
    obj ns;
    obj selector;
    obj arguments;
    
    selector { return selector; }
    arguments { return arguments; }
}


class Null : Object {
    printString { return "null"; }
}

class Void : Object {
    printString { return "void"; }
}


// This is here just to make the compiler generate symbols.
class Junk : Object {
    __ind__ {}
    __addr__ {}
    
    typeError {}
    rangeError {}
    mustBeBoolean{}
    badObjectPointer {}
    self doesNotUnderstand: aMessage {}
    cannotReenterBlock {}
    wrongNumberOfArguments {}
}


extern cdecl obj Char_eq(c1, c2) {}

extern extension obj Float_succ(f) {}
extern extension obj Float_pred(f) {}
extern extension obj Float_pos(f) {}
extern extension obj Float_neg(f) {}
extern extension obj Float_mul(f1, f2) {}
extern extension obj Float_div(f1, f2) {}
extern extension obj Float_mod(f1, f2) {}
extern extension obj Float_add(f1, f2) {}
extern extension obj Float_sub(f1, f2) {}
extern extension obj Float_lt(f1, f2) {}
extern extension obj Float_gt(f1, f2) {}
extern extension obj Float_le(f1, f2) {}
extern extension obj Float_ge(f1, f2) {}
extern extension obj Float_eq(f1, f2) {}
extern extension obj Float_ne(f1, f2) {}

extern extension obj String_add(s1, s2) {}
extern extension obj String_lt(s1, s2) {}
extern extension obj String_gt(s1, s2) {}
extern extension obj String_le(s1, s2) {}
extern extension obj String_ge(s1, s2) {}
extern extension obj String_eq(s1, s2) {}
extern extension obj String_ne(s1, s2) {}
extern extension obj String_size(s) {}
extern extension obj String_item(s, i) {}
extern extension obj String_printString(s) {}
extern cdecl     obj String_fromInteger(i) {}
extern cdecl     obj String_fromFloat(f) {}

extern extension obj Symbol_printString(s) {}
